/**
 * SCRIPT MAESTRO DE NOTIFICACIONES CCM
 * 
 * Sistema unificado para env√≠o de notificaciones del CCM a m√∫ltiples plataformas:
 * - Telegram: Canal "CCM Notifications" (p√∫blico)
 * - Messenger: Chat grupal con l√≠deres de zona y hermanas capacitadoras (privado)
 * 
 * CARACTER√çSTICAS:
 * - Env√≠o coordinado a m√∫ltiples plataformas
 * - Diferentes audiencias y prop√≥sitos
 * - Manejo de errores independiente por plataforma
 * - Logging detallado de resultados
 * - Modo de prueba para testing seguro
 * 
 * FUNCIONES PRINCIPALES:
 * - enviarNotificacionesTodasPlataformas(): Env√≠a a Telegram + Messenger
 * - enviarSoloCumpleanosTodasPlataformas(): Solo cumplea√±os a ambos
 * - enviarSoloIngresosTodasPlataformas(): Solo ingresos a ambos
 * - estadoNotificacionesGlobal(): Estado de todas las plataformas
 * 
 * AUDIENCIAS:
 * - Telegram: Canal p√∫blico para informaci√≥n general
 * - Messenger: Chat privado para coordinaci√≥n de l√≠deres
 * 
 * @author CCM Scripts
 * @version 1.0
 */

// === CONFIGURACI√ìN GLOBAL ===
const MODO_PRUEBA_GLOBAL = false; // Cambiar a true para testing general

/**
 * Funci√≥n principal que env√≠a notificaciones CCM a todas las plataformas configuradas
 * Incluye Telegram (canal p√∫blico) y Messenger (chat privado con l√≠deres)
 */
function enviarNotificacionesTodasPlataformas() {
  console.log("üåê Iniciando proceso de notificaciones CCM para todas las plataformas");
  console.log("üì± Plataformas: Telegram (p√∫blico) + Messenger (l√≠deres)");
  
  if (MODO_PRUEBA_GLOBAL) {
    console.log("üß™ *** MODO PRUEBA GLOBAL ACTIVADO ***");
    return probarTodasLasPlataformas();
  }
  
  // Modo producci√≥n - conectar a base de datos
  let conn;
  
  try {
    // Conectar a la base de datos
    const url = `jdbc:mysql://${dbConfig.host}:${dbConfig.port}/${dbConfig.dbName}?useUnicode=true&characterEncoding=utf8`;
    conn = Jdbc.getConnection(url, dbConfig.user, dbConfig.password);
    
    // Establecer collation para la sesi√≥n
    const collationStmt = conn.createStatement();
    collationStmt.execute("SET collation_connection = utf8mb4_unicode_ci");
    collationStmt.execute("SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci");
    collationStmt.close();
    
    console.log("‚úÖ Conexi√≥n a MySQL exitosa con collation configurado");
    
    const resultados = [];
    
    // === ENV√çO A TELEGRAM ===
    if (TELEGRAM_CONFIG.enabled) {
      console.log("üì¢ Enviando notificaciones a Telegram...");
      
      try {
        // Cumplea√±os
        const resultadoCumpleanosT = notificarProximosCumpleanos(conn, RAMA);
        resultados.push({ 
          plataforma: 'Telegram', 
          tipo: 'cumpleanos', 
          resultado: resultadoCumpleanosT 
        });
        
        // Pausa entre mensajes
        Utilities.sleep(3000);
        
        // Ingresos al CCM
        const resultadoIngresosT = notificarProximosIngresosCCM(conn, RAMA);
        resultados.push({ 
          plataforma: 'Telegram', 
          tipo: 'ingresos', 
          resultado: resultadoIngresosT 
        });
        
        console.log("üì¢ Notificaciones de Telegram completadas");
        
      } catch (error) {
        console.error("‚ùå Error en notificaciones de Telegram:", error.toString());
        resultados.push({ 
          plataforma: 'Telegram', 
          tipo: 'error', 
          resultado: { success: false, error: error.toString() } 
        });
      }
    } else {
      console.log("‚ö†Ô∏è Telegram deshabilitado, omitiendo...");
      resultados.push({ 
        plataforma: 'Telegram', 
        tipo: 'omitido', 
        resultado: { success: false, message: "Deshabilitado" } 
      });
    }
    
    // Pausa entre plataformas
    Utilities.sleep(5000);
    
    // === ENV√çO A MESSENGER ===
    if (MESSENGER_CONFIG.enabled) {
      console.log("üí¨ Enviando notificaciones a Messenger...");
      
      try {
        const resultadoMessenger = enviarTodasLasNotificacionesMessenger(conn, RAMA);
        resultados.push({ 
          plataforma: 'Messenger', 
          tipo: 'todas', 
          resultado: resultadoMessenger 
        });
        
        console.log("üí¨ Notificaciones de Messenger completadas");
        
      } catch (error) {
        console.error("‚ùå Error en notificaciones de Messenger:", error.toString());
        resultados.push({ 
          plataforma: 'Messenger', 
          tipo: 'error', 
          resultado: { success: false, error: error.toString() } 
        });
      }
    } else {
      console.log("‚ö†Ô∏è Messenger deshabilitado, omitiendo...");
      resultados.push({ 
        plataforma: 'Messenger', 
        tipo: 'omitido', 
        resultado: { success: false, message: "Deshabilitado" } 
      });
    }
    
    // === EVALUAR RESULTADOS GENERALES ===
    const exitosos = resultados.filter(r => r.resultado.success).length;
    const fallidos = resultados.length - exitosos;
    const plataformasExitosas = [...new Set(resultados.filter(r => r.resultado.success).map(r => r.plataforma))];
    
    console.log(`\nüìä === RESUMEN GENERAL ===`);
    console.log(`‚úÖ Notificaciones exitosas: ${exitosos}`);
    console.log(`‚ùå Notificaciones fallidas: ${fallidos}`);
    console.log(`üì± Plataformas exitosas: ${plataformasExitosas.join(', ')}`);
    
    // Detalles por plataforma
    resultados.forEach(r => {
      const estado = r.resultado.success ? "‚úÖ" : "‚ùå";
      console.log(`   ${estado} ${r.plataforma} (${r.tipo}): ${r.resultado.success ? 'Exitoso' : r.resultado.error || r.resultado.message}`);
    });
    
    if (exitosos > 0) {
      console.log("üéâ Proceso de notificaciones completado con √©xito");
    } else {
      console.log("‚ö†Ô∏è Proceso completado pero sin notificaciones exitosas");
    }
    
    return {
      success: exitosos > 0,
      exitosos: exitosos,
      fallidos: fallidos,
      plataformasExitosas: plataformasExitosas,
      resultados: resultados
    };
    
  } catch (error) {
    console.error("‚ùå Error global en enviarNotificacionesTodasPlataformas:", error.toString());
    return { success: false, error: error.toString() };
  } finally {
    if (conn) {
      try {
        conn.close();
        console.log("‚úÖ Conexi√≥n a base de datos cerrada");
      } catch (error) {
        console.error("‚ö†Ô∏è Error al cerrar conexi√≥n:", error.toString());
      }
    }
  }
}

/**
 * Funci√≥n para enviar solo notificaciones de cumplea√±os a todas las plataformas
 */
function enviarSoloCumpleanosTodasPlataformas() {
  console.log("üéÇ Enviando solo notificaciones de cumplea√±os a todas las plataformas");
  
  let conn;
  
  try {
    const url = `jdbc:mysql://${dbConfig.host}:${dbConfig.port}/${dbConfig.dbName}?useUnicode=true&characterEncoding=utf8`;
    conn = Jdbc.getConnection(url, dbConfig.user, dbConfig.password);
    
    const collationStmt = conn.createStatement();
    collationStmt.execute("SET collation_connection = utf8mb4_unicode_ci");
    collationStmt.execute("SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci");
    collationStmt.close();
    
    const resultados = [];
    
    // Telegram
    if (TELEGRAM_CONFIG.enabled) {
      const resultado = notificarProximosCumpleanos(conn, RAMA);
      resultados.push({ plataforma: 'Telegram', resultado: resultado });
    }
    
    // Pausa entre plataformas
    Utilities.sleep(3000);
    
    // Messenger
    if (MESSENGER_CONFIG.enabled) {
      const resultado = notificarProximosCumpleanosMessenger(conn, RAMA);
      resultados.push({ plataforma: 'Messenger', resultado: resultado });
    }
    
    const exitosos = resultados.filter(r => r.resultado.success).length;
    console.log(`üéÇ Cumplea√±os enviados a ${exitosos} plataforma(s)`);
    
    return { success: exitosos > 0, resultados: resultados };
    
  } catch (error) {
    console.error("‚ùå Error en enviarSoloCumpleanosTodasPlataformas:", error.toString());
    return { success: false, error: error.toString() };
  } finally {
    if (conn) {
      try { conn.close(); } catch (e) {}
    }
  }
}

/**
 * Funci√≥n para enviar solo notificaciones de pr√≥ximos ingresos a todas las plataformas
 */
function enviarSoloIngresosTodasPlataformas() {
  console.log("üìä Enviando solo notificaciones de pr√≥ximos ingresos a todas las plataformas");
  
  let conn;
  
  try {
    const url = `jdbc:mysql://${dbConfig.host}:${dbConfig.port}/${dbConfig.dbName}?useUnicode=true&characterEncoding=utf8`;
    conn = Jdbc.getConnection(url, dbConfig.user, dbConfig.password);
    
    const collationStmt = conn.createStatement();
    collationStmt.execute("SET collation_connection = utf8mb4_unicode_ci");
    collationStmt.execute("SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci");
    collationStmt.close();
    
    const resultados = [];
    
    // Telegram
    if (TELEGRAM_CONFIG.enabled) {
      const resultado = notificarProximosIngresosCCM(conn, RAMA);
      resultados.push({ plataforma: 'Telegram', resultado: resultado });
    }
    
    // Pausa entre plataformas
    Utilities.sleep(3000);
    
    // Messenger
    if (MESSENGER_CONFIG.enabled) {
      const resultado = notificarProximosIngresosCCMMessenger(conn, RAMA);
      resultados.push({ plataforma: 'Messenger', resultado: resultado });
    }
    
    const exitosos = resultados.filter(r => r.resultado.success).length;
    console.log(`üìä Ingresos enviados a ${exitosos} plataforma(s)`);
    
    return { success: exitosos > 0, resultados: resultados };
    
  } catch (error) {
    console.error("‚ùå Error en enviarSoloIngresosTodasPlataformas:", error.toString());
    return { success: false, error: error.toString() };
  } finally {
    if (conn) {
      try { conn.close(); } catch (e) {}
    }
  }
}

/**
 * Funci√≥n de prueba para todas las plataformas
 */
function probarTodasLasPlataformas() {
  console.log("üß™ Ejecutando pruebas en todas las plataformas...");
  
  try {
    const resultados = [];
    
    // Probar Telegram
    if (TELEGRAM_CONFIG.enabled) {
      console.log("üì¢ Probando Telegram...");
      // Usar funci√≥n de prueba existente o enviar mensaje de prueba
      const resultado = enviarMensajeTelegram("üß™ Prueba de notificaciones CCM - Telegram\n\n‚úÖ Sistema funcionando correctamente");
      resultados.push({ plataforma: 'Telegram', resultado: resultado });
    }
    
    // Pausa entre pruebas
    Utilities.sleep(3000);
    
    // Probar Messenger
    if (MESSENGER_CONFIG.enabled) {
      console.log("üí¨ Probando Messenger...");
      const resultado = probarConexionMessenger();
      resultados.push({ plataforma: 'Messenger', resultado: resultado });
    }
    
    // Evaluar resultados
    const exitosos = resultados.filter(r => r.resultado.success).length;
    const total = resultados.length;
    
    console.log(`\nüß™ === RESULTADOS DE PRUEBA ===`);
    console.log(`‚úÖ Plataformas funcionando: ${exitosos}/${total}`);
    
    resultados.forEach(r => {
      const estado = r.resultado.success ? "‚úÖ" : "‚ùå";
      console.log(`   ${estado} ${r.plataforma}: ${r.resultado.success ? 'Funcionando' : r.resultado.error || r.resultado.message}`);
    });
    
    if (exitosos === total) {
      console.log("üéâ Todas las plataformas funcionando correctamente");
    } else if (exitosos > 0) {
      console.log("‚ö†Ô∏è Algunas plataformas funcionando");
    } else {
      console.log("‚ùå Ninguna plataforma funcionando");
    }
    
    return {
      success: exitosos > 0,
      exitosos: exitosos,
      total: total,
      resultados: resultados
    };
    
  } catch (error) {
    console.error("‚ùå Error en pruebas globales:", error.toString());
    return { success: false, error: error.toString() };
  }
}

/**
 * Funci√≥n de estado que muestra informaci√≥n sobre todas las plataformas
 */
function estadoNotificacionesGlobal() {
  try {
    console.log("üìä === ESTADO GLOBAL DE NOTIFICACIONES CCM ===");
    
    // Estado de Telegram
    console.log("\nüì¢ TELEGRAM:");
    console.log(`   Habilitado: ${TELEGRAM_CONFIG.enabled}`);
    console.log(`   Canal: ${TELEGRAM_CONFIG.canalNombre}`);
    console.log(`   Chat ID: ${TELEGRAM_CONFIG.chatId}`);
    console.log(`   Audiencia: Canal p√∫blico`);
    
    // Estado de Messenger
    console.log("\nüí¨ MESSENGER:");
    console.log(`   Habilitado: ${MESSENGER_CONFIG.enabled}`);
    console.log(`   Chat: ${MESSENGER_CONFIG.chatNombre}`);
    console.log(`   Chat ID: ${MESSENGER_CONFIG.chatId}`);
    console.log(`   Audiencia: ${MESSENGER_CONFIG.destinatarios}`);
    
    // Estado general
    console.log("\nüéØ CONFIGURACI√ìN GENERAL:");
    console.log(`   Rama: ${RAMA}`);
    console.log(`   Ramas autorizadas: ${RAMAS_AUTORIZADAS.join(', ')}`);
    
    // Contar triggers
    const triggersExistentes = ScriptApp.getProjectTriggers();
    const triggersTelegram = triggersExistentes.filter(t => 
      t.getHandlerFunction().includes('Telegram') || 
      t.getHandlerFunction().includes('cumpleanos') ||
      t.getHandlerFunction().includes('ingresos')
    ).length;
    const triggersMessenger = triggersExistentes.filter(t => 
      t.getHandlerFunction().includes('Messenger')
    ).length;
    
    console.log("\n‚è∞ TRIGGERS CONFIGURADOS:");
    console.log(`   Telegram: ${triggersTelegram}`);
    console.log(`   Messenger: ${triggersMessenger}`);
    
    // Evaluaci√≥n general
    const plataformasHabilitadas = [];
    if (TELEGRAM_CONFIG.enabled) plataformasHabilitadas.push('Telegram');
    if (MESSENGER_CONFIG.enabled) plataformasHabilitadas.push('Messenger');
    
    console.log("\nüì± RESUMEN:");
    console.log(`   Plataformas habilitadas: ${plataformasHabilitadas.join(', ')}`);
    console.log(`   Total triggers: ${triggersTelegram + triggersMessenger}`);
    
    if (plataformasHabilitadas.length === 0) {
      console.log("‚ö†Ô∏è ADVERTENCIA: Ninguna plataforma habilitada");
    } else {
      console.log(`‚úÖ Sistema funcionando en ${plataformasHabilitadas.length} plataforma(s)`);
    }
    
    return {
      success: true,
      plataformasHabilitadas: plataformasHabilitadas,
      telegramEnabled: TELEGRAM_CONFIG.enabled,
      messengerEnabled: MESSENGER_CONFIG.enabled,
      triggersTotal: triggersTelegram + triggersMessenger
    };
    
  } catch (error) {
    console.error("‚ùå Error al verificar estado global:", error.toString());
    return { success: false, error: error.toString() };
  }
}
